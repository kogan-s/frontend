Here is my current progect of user generator:


APIManager.js:

class APIManager {
  constructor() {
    this.data = {};
  }

  async loadData() {
    try {
      // Fetch data from the Random User Generator API
      const usersResponse = await fetch('https://randomuser.me/api/?results=7');
      const usersData = await usersResponse.json();
console.log(usersData);
      // Fetch data from the Random Kanye Quote Generator API
      const kanyeResponse = await fetch('https://api.kanye.rest/');
      const kanyeData = await kanyeResponse.json();

      // Fetch data from the PokeAPI to get a random Pokemon
      const randomPokemonId = Math.floor(Math.random() * 1281) + 1;

      const pokemonResponse = await fetch(`https://pokeapi.co/api/v2/pokemon/${randomPokemonId}`);
      const randomPokemon = await pokemonResponse.json();
       
      // Fetch data from the Bacon Ipsum API
     const baconResponse = await fetch('https://baconipsum.com/api/?type=meat-and-filler');
     const aboutMeText =  await baconResponse.json();
     
 
      // Update the data object with fetched data
      this.data = {
        mainUser: usersData.results[0],
        friends: usersData.results.slice(1),
        quote: kanyeData.quote,
        pokemon: randomPokemon,
        aboutMe: aboutMeText,
      };
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  }
}



main.js:

// Create instances of the Renderer and APIManager classes
const renderer = new Renderer();
const apiManager = new APIManager();

// Define loadData and renderData functions
async function loadDataAndRender() {
// Load data from APIs  
await apiManager.loadData();

  const data = apiManager.data;
  renderer.renderMainUser(data.mainUser);
  renderer.renderFriends(data.friends);
  renderer.renderQuote(data.quote);
  renderer.renderPokemon(data.pokemon);  
  renderer.renderAboutMe(data.aboutMe);
}

// Attach click event listeners to the buttons
//document.querySelector('.buttons button:nth-child(1)').addEventListener('click', loadData);
//document.querySelector('.buttons button:nth-child(2)').addEventListener('click', renderData);

// Attach click event listener to the "Generate" button
document.querySelector('.buttons button').addEventListener('click', loadDataAndRender);

Renderer.js:

class Renderer {
  renderMainUser(user) {
    // Use Handlebars template to render main user section
    const source = document.getElementById('main-user-template').innerHTML;
    const template = Handlebars.compile(source);
    const html = template(user);

    // Insert the rendered HTML into the user-container div
    document.querySelector('.user-container').innerHTML = html;
  }

  renderFriends(users) {
    // Use Handlebars template to render friends section
    const source = document.getElementById('friends-template').innerHTML;
    const template = Handlebars.compile(source);
    const html = template({ friends: users });

    // Insert the rendered HTML into the friends-container div
    document.querySelector('.friends-container').innerHTML = html;
  }


  renderQuote(users) {
    // Use Handlebars template to render Kanye section
    const source = document.getElementById('quote-template').innerHTML;
    const template = Handlebars.compile(source);
    const html = template({ quote: users });

    // Insert the rendered HTML into the friends-container div
    document.querySelector('.quote-container').innerHTML = html;
  }


 renderPokemon(pokemon) {
    // Use Handlebars template to render Pokemon section
  const source = document.getElementById('pokemon-template').innerHTML;
  const template = Handlebars.compile(source);
  const html = template(pokemon);

    // Insert the rendered HTML into the friends-container div
    document.querySelector('.pokemon-container').innerHTML = html;
  }


  renderAboutMe(text) {
    // Use Handlebars template to render About Me section
    const source = document.getElementById('about-me-template').innerHTML;
    const template = Handlebars.compile(source);
    const html = template({ text });

    // Insert the rendered HTML into the meat-container div
    document.querySelector('.meat-container').innerHTML = html;
  }
}




// Extencions

// Custom Handlebars helper to convert name to Proper Case
Handlebars.registerHelper('properCase', function (name) {
    // Convert the first letter to uppercase and the rest to lowercase
    return name.charAt(0).toUpperCase() + name.slice(1);
});

index.html:

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>API Project</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://fonts.googleapis.com/css?family=Nunito" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Indie+Flower" rel="stylesheet">
    <link rel="stylesheet" type="text/css" media="screen" href="style.css" />

</head>
 <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.0/jquery.js"></script>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.4/handlebars.js"></script>


  <!-- Handlebars templates -->
  <script id="main-user-template" type="text/x-handlebars-template">
    <!-- Main User Section -->
    <div class="user-picture">
      <img src="{{picture.large}}" alt="{{name.first}} {{name.last}}">
    </div>
    <div class="user-info">
      <h1>{{name.first}} {{name.last}}</h1>
      <p>{{location.city}}, {{location.state}}</p>
    </div>
  </script>

  <script id="friends-template" type="text/x-handlebars-template">
    <!-- Friends Section -->
    {{#each friends}}
    <p>{{name.first}} {{name.last}}</p>
    {{/each}}
  </script>

  <script id="about-me-template" type="text/x-handlebars-template">
    <!-- About Me Section -->
    <h4>About Me</h4>
    <p>{{text}}</p>
  </script>


  <script id="quote-template" type="text/x-handlebars-template">
    <!-- Quote Section -->
    <h4>Favorite Quote</h4>
    <p>{{quote}} - Kanye West</p>
  </script>


  <script id="pokemon-template" type="text/x-handlebars-template">
    <!-- Pokemon Section -->
    <div class="pokemon-picture">
      <img src="{{sprites.front_default}}" alt="{{name}}">
   </div>
    <div class="pokemon-info">  
      <p>Favorite Pokemon - {{properCase name}}</p>      <!-- use helper to change case >!--
    </div>
  </script>


</head>


<body>
    <div class="container">	
        <div class="user-container"></div>	
        <div class="quote-container"></div>	
        <div class="content-container">
          <div class="pokemon-container"></div>	
          <div class="meat-container"></div>	 
       </div> 	
        <div class="friends">	
            <h4>Friends</h4>	
            <div class="friends-container">	
            </div>	
        </div>
	
        <div class="buttons">	
            <button>Generate</button>		
        </div>	
    </div>

<script src="Renderer.js"></script>
<script src="APIManager.js"></script>
<script src="main.js"></script>

</body>

</html>


style.css:

body {
    background-color: #ecf0f1;
    font-family: 'Nunito', sans-serif;
} */

.container {
  /*  height: 100vh;   */
    display: grid;
    grid-template-columns: 9fr 2fr;
    grid-template-rows: 2fr 1fr 6fr 1fr;
    grid-template-areas:
    "user      user"
    "quote     friends"
    "pokemon   friends"
    "meat      friends"
    "buttons   buttons";
}

.user-container {
    display: flex;
    align-items: center;
    gap: 10px;
  
    grid-row: 1;
    grid-column: 1;  /* ????? */
   /* font-size: 15px;  */
    background-color: #3498db;
   /* padding: 1vmax;   */
   /* box-shadow: 1px 1px 3px black; */
   /* border-bottom-right-radius: 4px;*/
}

.user-info {
  /*  color: #ecf0f1;          */
 /*   display: inline-block;   */
 /*   vertical-align: middle; */
}

.user-picture img {
    max-width: 120px; 
    border-radius: 50%; /* circular */
  }
    


.quote-container {
    display: flex;    
    grid-row: 2;
    grid-column: 1;
    font-size: 1vmax;
    text-align: left;
    color: #2c3e50;
    padding: 1vmax;
   /* font-family: 'Indie Flower', cursive;*/
}

.quote-container>p {
   /* font-family: 'Nunito', sans-serif;  */
    font-size: 1vmax;
}


.friends {
    grid-row: 2/4;
    grid-column: 2;
    background-color: #3498db;
    font-size: 1.5vmax;
    color: #ecf0f1;
    border-top-left-radius: 4px;
    box-shadow: -1px -1px 3px black;
    padding-left: 1vmax;
}

ul {
    list-style-type: none;
}

.buttons {
    grid-row: 4;
    grid-column: 1/2;

    font-size: 20px;
    background-color: #3498db;
    padding: 1vmax;
    box-shadow: 1px 1px 3px black;
    border-bottom-right-radius: 4px;

}

button {
    width: 150px;
    height: 30px;
    border-radius: 2px;
    background-color: #27ae60;
    color: #ecf0f1;
    font-size: 1vmax;
    cursor: pointer;
}

/*#gen-page:focus {
    outline: none;
} */


.pokemon-container {
    grid-row: 3;
    grid-column: 1;
    font-size: 20px;
    padding: 1vw;
    display: flex;
   /* grid-template-columns: minmax(150px, 150px) minmax(200px, 400px);  */
    align-items: center;
    justify-self: baseline;
    border-bottom: 1px solid #2c3e50;
}

.pokemon-info {
/*    color: #ecf0f1;  */
    display: grid;
/*    vertical-align: middle; */
    grid-row: 3;
    grid-column: 1;
}

.pokemon-picture img {
    max-width: 100px; 
    border-radius: 50%; /* circular */
  }

.meat-contatiner {
    grid-row: 4;
    grid-column: 1;
    display: grid;
/*    padding: 1vw;  */
/*    font-size: 1vmax;  */
}


.content-container {
    grid-row: 3;
    grid-column: 1;
    display: grid;
    grid-template-columns: minmax(200px, 70vw);
    align-self: start;
}         



Add in two more buttons - a “Save User Page” button and a "Load User Page".
Your “Save User Page” button should save a snapshot of your current user to local storage
Your “Load User Page” button should load the user that you saved and render the exact user page back on the page - that means the same user, the quote, pokemon, meatText and friends they came with.

