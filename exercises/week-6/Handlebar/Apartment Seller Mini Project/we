
This is an apartment listing app.



index.html:

<!DOCTYPE html>
<html>

<head>
    <title>Selouse</title>

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ"
        crossorigin="anonymous">
    <link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="style.css" />
</head>

<body>

    <div id="search">
        <input type="text" placeholder="Address" id="addr-input">
        <input type="number" class="min price" placeholder="Min. Price" id="min-p-input">
        <input type="number" class="max price" placeholder="Max Price" id="max-p-input">
        <input type="number" class="min room" placeholder="Min. Rooms" id="min-r-input">
        <input type="number" class="max room" placeholder="Max Rooms" id="max-r-input">

        <div class="check-group">
            <input class="form-radio" type="checkbox" name="immediate" id="immed-y">
            <label for="immediate">Immediate</label>
        </div>
        <div class="check-group">
            <input class="form-radio" type="checkbox" name="parking" id="park-y">
            <label for="parking">Parking</label>
        </div>

        <button>Find Apartments</button>
    </div>

    <hr>

    <div id="results"></div>

    <!-- Your Code Here -->
    <!-- You should start doing handlebar stuff here -->
    <!-- Your Code Here -->

    <script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.11/handlebars.js"></script>
    <script src="apt-data.js"></script>
    <script src="apt-filter.js"></script>
    <script src="main.js"></script>
</body>

</html>



main.js:


$("button").on("click", function () {
    let address = $("#addr-input").val()
    let minPrice = $("#min-p-input").val()
    let maxPrice = $("#max-p-input").val()
    let minRooms = $("#min-r-input").val()
    let maxRooms = $("#max-r-input").val()
    let immediate = $("#immed-y")

    let relevantApts = findRelevantApts(address, minPrice, maxPrice, minRooms, maxRooms, immediate)
    renderApts(relevantApts)
})

const renderApts = function (apartments) {
    $("#results").empty()
    console.log(apartments) //array of apartments to render
    //Your code goes here.
}

renderApts(apartments) //renders apartments when page loads


style.css:


*{
    color: #DDC9B3;
}

body{
    background-color: #DDC9B3;
}

#search{
    margin: 20px;
}

input{
    margin: 5px;
    padding: .5em .6em;
    display: inline-block;
    border: 1px solid #ccc;
    box-shadow: inset 0 1px 3px #ddd;
    border-radius: 4px;
    vertical-align: middle;
    box-sizing: border-box;
    color: #443729;
    font-weight: bold;
}

label{
     font: 300 16px/1.7 'Open Sans', sans-serif;
     color: #443729;
     cursor: pointer;
} 

.form-radio
{
     -webkit-appearance: none;
     -moz-appearance: none;
     appearance: none;
     display: inline-block;
     position: relative;
     background-color: #f1f1f1;
     color: #666;
     height: 30px;
     width: 30px;
     border: 0;
     border-radius: 50px;
     cursor: pointer;     
     outline: none;
}
.form-radio:checked::before
{
     position: absolute;
     font: 13px/1 'Open Sans', sans-serif;
     left: 11px;
     top: 7px;
     content: '\02143';
     transform: rotate(40deg);
}
.form-radio:hover
{
     background-color: #f7f7f7;
}
.form-radio:checked
{
     background-color: #f1f1f1;
}

.result{
    font-family: 'Raleway', sans-serif;
    display: grid;
    grid-template-columns: 350px 90px 280px;
    grid-template-areas: 
    "i la a"
    "i lpr p"
    "i lr r"
    "i lpark park";
    box-shadow: 1px 1px 3px #0a1612;
    margin: 20px;
    padding: 20px;
    margin-top: 50px;
    background-color: #443729;
    align-items: center;
}

.check-group{
    height: 35px;
}

button{
    margin-top: 10px;
    background-color: #7A6C5D;
    border: none;
    color: #DDC9B3;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    border: 2px solid #443729;
    border-radius: 5px;
    cursor: pointer;
}

button:focus {outline:0;}

button:active{background-color: #443729;}

.result>img{
    max-width: 325px;
    grid-area: i;
    box-shadow: 1px 1px 3px black;
    border-radius: 5px;
}

.result>.label{
    font-weight: bold;
}

.result>.l-addr{
    grid-area: la;
}

.result>.l-price{
    grid-area: lpr;
}

.result>.l-rooms{
    grid-area: lr;
}

.result>.l-park{
    grid-area: lpark;
}

.result>.l-immediate{}

.result>.address{
    grid-area: a;
}

.price{
    grid-area: p;
}

.result>.rooms {
    grid-area: r;
}

.result>.parking{
    grid-area: park;
}

.result>.immediate{}

.no-match{
    color: #DD6300;
    display: inline-block;
    font-weight: bold;
    margin: 10px;
    padding: 10px;
    border-radius: 5px;
    font-family: 'Raleway', sans-serif;
}

apt-data.js:
//You should not be touching this file. This is just your data. 
//You can certainly explore this file to get to know your data.

const apartments = [
    {
        img: "https://circaoldhouses.com/wp-content/uploads/2017/10/key-hole-house-1.jpg",
        address: "P. Sherman 42 Wallabe Way, Sydney",
        price: 2400,
        rooms: 2,
        parking: false,
        immediate: true,
        contactDetails: {
            name: "Douglas",
            email: "doug@less.com"
        }
    },
    {
        img: "https://i.pinimg.com/736x/17/f2/6e/17f26e8f188af5d3e377dacb2011889a--mediterranean-houses-mediterranean-style.jpg",
        address: "Cherobee 21, South Boulevard",
        price: 12000,
        rooms: 5,
        parking: true,
        immediate: false,
        contactDetails: {
            name: "William",
            email: "will@i.am"
        }
    },
    {
        img: "https://blenderartists.org/uploads/default/original/4X/2/f/9/2f9d2a683dd5eada8bf64a590aa20a01312509ca.jpg",
        address: "100 Bonaroo Road, East Dingling",
        price: 1000,
        rooms: 3,
        parking: false,
        immediate: true,
        contactDetails: {
            name: "Rickay",
            email: "rrrrick@cucumber.com"
        }
    },
    {
        img: "http://mat2.materialicious.com/images/space-house-803-o.jpg",
        address: "McGraw Chukitee, 80",
        price: 2300,
        rooms: 4,
        parking: false,
        immediate: false,
        contactDetails: {
            name: "Charles",
            email: "charles.smith@coldmail.com"
        }
    },
    {
        img: "http://www.kucasnova.com/wp-content/uploads/2014/01/projekat-kuce-sa-potkrovljem-i-garazom-4-1.jpg",
        address: "A.D Nooks Plaza, 16 St.",
        price: 11000,
        rooms: 6,
        parking: true,
        immediate: true,
        contactDetails: {
            name: "Trevor",
            email: "t@noah.ark"
        }
    }
]


apt-filter.js:

//Only start playing with this file if you're done with all the basics

const must = (radio) => radio.filter(rb => rb.checked).length

const findRelevantApts = function (address, minPrice, maxPrice, minRooms, maxRooms, immediate) {
    let relevantApts = apartments.filter(a =>
        a.address.toLowerCase().includes(address.toLowerCase() || "") &&
        a.price >= (minPrice || 0) &&
        a.price <= (maxPrice || a.price) &&
        a.rooms >= (minRooms || 0) &&
        a.rooms <= (maxRooms || a.rooms)
    )

    immediate = !immediate[0].checked
    return immediate ? relevantApts : relevantApts.filter(a => (a.immediate)) 
}


At the top of the page, you have some inputs that you can fill in to filter the apartments you want to see.
For instance, if you enter 1000 to the Max Price field, you’ll only see apartments with a price of $1,000 or below.
The code that does the filtering exists for you - that’s in apt-filter.js - and you don’t need to worry about it for now.
The apt-data.js file is just an array of apartment objects - you should explore this file a bit to understand the data you’ll be working with.
For most of this project, you should only have to make changes in index.html and main.js - so let’s talk instructions.
To Do
JS
In your main.js file you’ll have to set up your Handlebars source, template, etc. It’s very little code, but make sure you’re adding the HTML you genereate to the #results element.
To do this, you’ll have to work in the renderApts function.
Notice that it has an apartments parameter: this is the list of apartments you’ll have to render; it’s already filtered for you based on the user selection!
Side note: the main.js file has access to the apartments variable because we have the script of our apt-data.js in our HTML before the script for our main.js - hence apartments is effectively a global variable in main.js
HTML
Now for the interesting part.
Feel free to ignore everything inside of the div with an ID of search - that’s not relevant to the Handlebars stuff you’ll be writing.
You can also ignore the #results div - that’s where all your generated HTML will be added.
Important: Before you get started on the handlebars template, make sure you review and understand the CSS file as you’ll need to add the correct classes and id’s to render everything properly.
Here’s what you need to do:
Create the script parameter that will house all your Handlebar HTML
Remember that you’re working with an array - how do you render each item in the array?
Start by just displaying the relevant data - don’t worry too much about styling
You should only display the contactDetails if the immediate boolean is true - do this through Handlebars, not JS logic
You should only display "Parking available"* if the parking boolean is true
Don’t forget to take advantage of the styling given to you, and wrap your results inside a div with a class of result, and checkout the CSS file for other hints
*Instead of displaying "Parking available", use a font-awesome icon for parking instead
Again, for starters - forget styling, just make sure everything is rendering.
Once you’re done with the basics above, do the following:
If there are no matching results, display a message that says so. This resource will help
Check out this resource to figure out how to use Handlebars to format your price to a nice currency format. Note you’ll need to research something called npm.
Now, if you really wanna get Handlebars, do the following:
Add a features property to each item in the apartments array - that’s in apt-data.js
The value should be an array of features the apartment has, such has "AC", "Elevator", "Indoor Plumbing", etc.
Render each of the features for each of the apartments using Handlebars
This will be an inner each
Remember this resource
Logical Challenges
Do the following for a nice logical challenge:
You’ll notice that the parking checkbox doesn’t actually filter
Check out the code in apt-filter.js and make it filter!
Finally, for a really cool, non-Handlebar related logical challenge:
Delete the code in apt-filter.js
Re-write it yourself
Keep the findRelevantApts function signature
Use those filter parameters and the globally available apartments variable to return a subset of apartments that match the filters